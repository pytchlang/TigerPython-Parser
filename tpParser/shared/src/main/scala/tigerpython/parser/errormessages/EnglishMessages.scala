/*
 * This file is part of the 'TigerPython-Parser' project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package tigerpython.parser
package errormessages

import tigerpython.parser.errors.ErrorCode

/**
  * @author Tobias Kohn
  *
  * Created by Tobias Kohn on 30/06/2016
  * Updated by Tobias Kohn on 18/01/2020
  */
object EnglishMessages extends ModifiableErrorMessages {
  import tigerpython.parser.errors.ErrorCode._

  protected def _getMessage(msg: ErrorCode.Value): String =
    msg match {
      case AND_CONNECTS_CMP_NOT_VARS => "'%s' connects comparisons not variables."
      case ARG_AFTER_VARARGS => "You cannot pass further arguments after an unpacking var/keyword-argument."
      case AS_NOT_ALLOWED_HERE => "'as' is not allowed/supported here."
      case ASSIGNMENT_TO_RIGHT => "The target of an assignment must be on the left."
      case USE_BREAK_INSTEAD_OF_RETURN => "Use 'break' instead of 'return' to exit a loop."
      case BREAK_OUTSIDE_LOOP => "A '%s'-statement cannot occur outside a loop."
      case CALL_NEEDS_PARENTHESES => "To call a function you must add parentheses even when they are empty: '%s()'."
      case CANNOT_APPLY_ASYNC => "Cannot apply 'async' to this statement."
      case CANNOT_ASSIGN_TO_CALL => "You cannot assign something to a function call."
      case CANNOT_ASSIGN_TO_FUNCTION => "You cannot assign something to a function."
      case CANNOT_REDEFINE_NAME => "The name '%s' is already defined."
      case CANNOT_TEST_TUPLE => "You need to test each element of this tuple individually."
      case CANNOT_USE_KEYWORD_AS_NAME => "You cannot use the keyword '%s' as a name."
      case CLASS_METHOD_WITHOUT_SELF => "A class-method needs at least one parameter."
      case COLON_EXPECTED => "A colon ':' is required here."
      case CONDITION_CANNOT_BE_FULFILLED => "This condition cannot be fulfilled."
      case CONDITION_ALWAYS_FULFILLED => "This condition is always fulfilled."
      case DECORATOR_NAME_CLASH => "A function and its decorator cannot have the same name '%s'."
      case DECORATOR_NEEDS_CALLABLE => "Decorators are only applicable to functions and classes."
      case DEFINITION_INSIDE_LOOP => "A '%s'-definition cannot be inside a loop."
      case DOUBLE_ELSE => "An '%s'-structure can only have one 'else'-branch."
      case DOUBLE_EQUAL_SIGN_EXPECTED => "A double equal sign '==' is required here."
      case DOUBLE_PARAMETER_NAMES => "Two parameters cannot have the same name: '%s'."
      case ELSE_MUST_BE_INDENTED => "'%s' must be indented to match the 'if'."
      case ELSE_WITH_COMPARISON => "'else' does not have a comparison."
      case ELSE_WITHOUT_IF => "There is an '%s' without an 'if'."
      case EMPTY_SUBSCRIPT => "The subscript '[]' cannot be empty."
      case EXTRA_INDENTATION => "There is an extra indentation."
      case EXTRA_LINEBREAK => "There seems to be an extra linebreak. You might want to hide it using '\\'."
      case EXTRA_LEFT_BRACKET => "There is an extra opening bracket or parenthesis: '%s'."
      case EXTRA_RIGHT_BRACKET => "There is an extra closing bracket or parenthesis: '%s'."
      case EXTRA_SPACE => "There is an extra space."
      case EXTRA_SPACE_OR_MISSING_COMMA => "There is an extra space or missing comma."
      case EXTRA_TOKEN => "There seems to be an extra symbol '%s' here."
      case FOREIGN_KEYWORD => "'%s' is not a keyword in Python."
      case FOREIGN_PRIVATE => "The token '%s' is invalid, use underscores '_' to mark a function as 'private'."
      case FOREIGN_STATEMENT => "Python has no '%s'-statement."
      case FOREIGN_SYNTAX => "This %s-syntax is invalid in Python."
      case FOREIGN_TOKEN => "The token '%s' is invalid, use '%s' instead."
      case FOREIGN_VAR => "Python does not use '%s' to define variables."
      case FOR_TARGET_NAME_REQUIRED => "The 'for'-loop requires a variable after the 'for'."
      case FUTURE_MUST_BE_FIRST => "The 'from __future__ import'-statement must be the first statement in the module."
      case GENERATOR_CANNOT_RETURN_VALUE => "A generator cannot use 'return' to return a value."
      case GLOBAL_MUST_BE_FIRST => "'%s'-statements must be the first statements inside a function."
      case GLOBAL_OUTSIDE_FUNCTION => "A '%s'-statement cannot occur outside a function."
      case IMPORT_INSIDE_LOOP => "An 'import'-statement cannot be inside a loop."
      case INCOMPLETE_IMPORT => "This import statement is incomplete."
      case INCONSISTENT_INDENTATION => "The indentation is inconsistent."
      case INCONSISTENT_RETURNS => "This function sometimes returns a value and sometimes does not."
      case INDENTED_ELSE => "This '%s' must not be indented."
      case INDENTED_HEADER => "The header of the '%s' must not be indented; just its body must be indented."
      case INFINITE_LOOP => "This is an infinite loop: it runs forever."
      case INITIALIZATION_INSIDE_LOOP => "You cannot have the initialization inside the loop."
      case INVALID_ASSIGNMENT => "You cannot assign something to '%s'."
      case INVALID_FUNCTION_DEF => "Invalid definition of a function."
      case INVALID_FUNCTION_DEF_ASSIGN => "Use ':' and 'return' instead of an assignment."
      case INVALID_GENERATOR_ARG => "A 'generator/comprehension' argument cannot be combined with other arguments."
      case INVALID_INPUT_CHARACTER => "This is an invalid input character: '%s'."
      case INVALID_KEY_VALUE_PAIR => "This is an invalid key-value-pair."
      case INVALID_NAME => "This is an invalid name: '%s'."
      case INVALID_AUGASSIGN_TARGET => "This expression is not a valid target for augmented assignment."
      case INVALID_STRING_PREFIX => "This is an invalid string prefix: '%s'."
      case INVALID_TOKEN_AT_START_OF_LINE => "This token cannot be at the beginning of a line: '%s'."
      case METHOD_WITHOUT_SELF => "A method requires a 'self'-parameter."
      case MISMATCHED_CLOSING_BRACKET => "There are mismatched brackets or parentheses: expected '%s' but found '%s'."
      case MISPLACED_ASSIGN => "The assignment '%s' cannot occur as part of an expression."
      case MISSING_ASSIGNMENT => "There seems to be an assignment missing."
      case MISSING_ASSIGNMENT_SOURCE => "The assignment is missing a value or source expression."
      case MISSING_BODY => "There is a body or indentation missing."
      case MISSING_COMMA => "There seems to be a comma missing."
      case MISSING_COMPARISON => "There is a comparison missing."
      case MISSING_DOT => "There seems to be a dot missing."
      case MISSING_LEFT_BRACKET => "There is a missing left bracket or parenthesis: '%s'."
      case MISSING_LEFT_PARENTHESIS => "There is a missing left parenthesis '('."
      case MISSING_OPERATOR_OR_COMMA => "There is an operator or comma missing."
      case MISSING_PARENTHESES => "There seem to be parentheses missing."
      case MISSING_RIGHT_BRACKET => "There is a closing bracket or parenthesis missing: '%s'."
      case MISSING_SPACE => "There is a space missing."
      case MISSING_TOKEN => "Missing '%s'."
      case MISSPELLED_KEYWORD => "Misspelled keyword '%s' instead of '%s'."
      case MISSPELLED_NUMBER => "There seems to be a typo inside your number."
      case MISSPELLED_OPERATOR => "Misspelled operator '%s' instead of '%s'."
      case MULTIPLE_VAR_ARGS => "Only one unpacking var/keyword-argument is allowed."
      case MULTIPLE_VAR_PARAMS => "Only one unpacking var/keyword-parameter is allowed."
      case NAME_EXPECTED => "There is a name required here."
      case NO_END_NEEDED => "There is no 'end' needed or allowed in Python."
      case NO_PARAM_DEFAULT_ALLOWED => "An unpacking parameter cannot have a default value."
      case NO_VIABLE_ALTERNATIVE => "I am lost and cannot make sense of your program code, anymore, at '%s'."
      case NUMBER_NOT_SUBSCRIPTABLE => "A number cannot have a subscript."
      case PARAM_AFTER_KEYWORD_PARAM => "The unpacking keyword-parameter must come last."
      case PARAMS_REQUIRED => "Parameter(s) required but '%s' found."
      case POS_ARG_AFTER_KEYWORD => "Positional arguments cannot follow keyword arguments."
      case POS_PARAM_AFTER_KEYWORD => "Parameters without defaults cannot follow parameters with default value or unpacking parameters."
      case PRINT_DEST_EXPECTED => "'>>' must be followed by a valid output destination."
      case PRINT_IS_STATEMENT => "In Python 2.x 'print' is a statement and cannot be called with keyword arguments."
      case PRINT_NEEDS_PARENTHESES => "In Python 3.x 'print' is a function and requires parentheses."
      case PYTHON_2_FEATURE_NOT_AVAILABLE => "This feature from Python 2.x is not available."
      case PYTHON_3_FEATURE_NOT_AVAILABLE => "This feature from Python 3.x is not available."
      case USE_RETURN_INSTEAD_OF_BREAK => "Use 'return' instead of 'break' to exit a function."
      case RETURN_OUTSIDE_FUNCTION => "A 'return'-statement cannot occur outside a function."
      case SINGLE_EQUAL_SIGN_EXPECTED => "Use a single equal sign '=' for assignment."
      case SUPERFLUOUS_COMPARISON => "The comparison to '%s' is superfluous here."
      case SWAPPED_TOKENS => "These symbols seem to be swapped: '%s' and '%s'."
      case TOKEN_REQUIRED => "'%s' required but '%s' found."
      case TWO_STATEMENTS => "You cannot put two statements on a single line."
      case TUPLE_NEEDS_PARENS => "This tuple needs to be enclosed in parentheses."
      case UNEXPECTED_END_OF_INPUT => "Unexpected end of line or input."
      case UNEXPECTED_KEYWORD => "The keyword '%s' cannot occur at this point."
      case UNMATCHED_BRACKET => "This left bracket '%s' has no matching right bracket."
      case UNREACHABLE_CODE => "This code is unreachable and will never be executed."
      case UNTERMINATED_STRING => "This string is unterminated."
      case USE_AND_NOT_COMMA => "Multiple comparisons are combined by 'and' or 'or' instead of a comma."
      case USE_COMMA_NOT_AND => "Multiple values are separated by comma instead of 'and'."
      case USE_ELIF_INSTEAD_OF_ELSE => "Use 'elif' instead of 'else'."
      case USE_ELIF_INSTEAD_OF_ELSE_IF => "Use 'elif' instead of 'else if'."
      case USE_EQ_INSTEAD_OF_NEQ => "Use '== %s' instead of '!= %s'."
      case USE_MOD_NOT_DIV => "Use '%%' instead of '/' to check for divisibility."
      case USE_NOT_INSTEAD_OF_FALSE => "Use 'not' rather than a comparison to '%s'."
      case USE_REPEAT_INSTEAD_OF_WHILE => "Use 'repeat' instead of 'while'."
      case USELESS_COMPUTATION => "The result of this expression is never used."
      case USELESS_STATEMENT => "This statement seems useless: it has no effect."
      case USELESS_STMT_USE_AUG_ASSIGN => "This statement seems useless. Did you mean '%s='?"
      case VARARG_AFTER_KEYWORD_ARG => "The unpacking var-argument must precede the unpacking keyword-argument."
      case VARARG_NOT_ALLOWED => "Unpacking var/keyword-arguments are not allowed at this point."
      case WRONG_BRACKET => "Wrong parenthesis or bracket: '%s' is required instead of '%s'."
      case WRONG_TOKEN => "Wrong symbol '%s' instead of '%s'."
      case YIELD_OUTSIDE_FUNCTION => "A 'yield'-expression cannot occur outside a function."
      case _ => msg.toString
    }
}
